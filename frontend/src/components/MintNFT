import React, { useState } from 'react';

const MintNFT: React.FC = () => {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
  });
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const [mintedNFT, setMintedNFT] = useState<{ assetId: number; metadataUrl: string } | null>(null);
  const [uploadProgress, setUploadProgress] = useState(0);

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedFile(file);
      const url = URL.createObjectURL(file);
      setPreviewUrl(url);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const simulateProgress = () => {
    setUploadProgress(0);
    const interval = setInterval(() => {
      setUploadProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          return 100;
        }
        return prev + 10;
      });
    }, 200);
  };

  const handleMintNFT = async () => {
    if (!selectedFile) return;

    setIsLoading(true);
    simulateProgress();

    try {
      // Mock IPFS upload and NFT minting
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      setMintedNFT({
        assetId: 123456789,
        metadataUrl: 'https://ipfs.io/ipfs/QmExampleMetadata'
      });
    } catch (error) {
      console.error('NFT minting failed:', error);
    } finally {
      setIsLoading(false);
      setUploadProgress(0);
    }
  };

  return (
    <div className="max-w-2xl mx-auto bg-white rounded-xl shadow-lg p-6">
      <h2 className="text-2xl font-bold text-gray-900 mb-6">Mint Algorand NFT</h2>

      <div className="space-y-6">
        {/* File Upload */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            NFT Image *
          </label>
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition duration-200">
            <input
              type="file"
              onChange={handleFileSelect}
              accept="image/*,video/*,audio/*"
              className="hidden"
              id="file-upload"
            />
            <label htmlFor="file-upload" className="cursor-pointer">
              {previewUrl ? (
                <div className="flex flex-col items-center">
                  <img 
                    src={previewUrl} 
                    alt="Preview" 
                    className="max-w-full h-48 object-cover rounded-lg mb-4"
                  />
                  <span className="text-blue-600 font-semibold">Change File</span>
                </div>
              ) : (
                <div className="flex flex-col items-center">
                  <div className="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mb-3">
                    <span className="text-gray-400 text-2xl">+</span>
                  </div>
                  <p className="text-gray-600">Click to upload your NFT media</p>
                  <p className="text-gray-400 text-sm mt-1">Supports images, videos, and audio files</p>
                </div>
              )}
            </label>
          </div>
        </div>

        {/* NFT Details */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            NFT Name *
          </label>
          <input
            type="text"
            value={formData.name}
            onChange={(e) => handleInputChange('name', e.target.value)}
            placeholder="e.g., Digital Art #1"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Description
          </label>
          <textarea
            value={formData.description}
            onChange={(e) => handleInputChange('description', e.target.value)}
            placeholder="Describe your NFT..."
            rows={3}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        {/* Progress Indicator */}
        {isLoading && (
          <div className="space-y-2">
            <div className="flex justify-between text-sm text-gray-600">
              <span>Uploading to IPFS...</span>
              <span>{uploadProgress}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${uploadProgress}%` }}
              ></div>
            </div>
          </div>
        )}

        {/* Mint Button */}
        <button
          onClick={handleMintNFT}
          disabled={isLoading || !selectedFile || !formData.name}
          className={`w-full py-3 px-4 rounded-lg font-semibold text-white transition duration-200 ${
            isLoading || !selectedFile || !formData.name
              ? 'bg-gray-400 cursor-not-allowed'
              : 'bg-purple-600 hover:bg-purple-700 transform hover:scale-105'
          }`}
        >
          {isLoading ? (
            <div className="flex items-center justify-center">
              <div className="w-5 h-5 border-t-2 border-b-2 border-white rounded-full animate-spin mr-2"></div>
              Minting NFT...
            </div>
          ) : (
            'Mint NFT'
          )}
        </button>

        {/* Success Message */}
        {mintedNFT && (
          <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
            <div className="flex items-center">
              <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3">
                <span className="text-green-600 text-lg">✓</span>
              </div>
              <div className="flex-1">
                <p className="text-green-800 font-semibold">NFT Minted Successfully!</p>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2 text-sm">
                  <div>
                    <span className="text-green-600">Asset ID:</span>
                    <span className="font-mono text-green-700 ml-2">{mintedNFT.assetId}</span>
                  </div>
                  <div>
                    <span className="text-green-600">Metadata:</span>
                    <a 
                      href={mintedNFT.metadataUrl} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:text-blue-700 ml-2"
                    >
                      View on IPFS
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Info Box */}
        <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
          <h4 className="text-sm font-semibold text-purple-900 mb-2">About Algorand NFTs</h4>
          <ul className="text-xs text-purple-700 space-y-1">
            <li>• ARC-69 standard for rich metadata</li>
            <li>• Permanent storage on IPFS</li>
            <li>• Low minting costs (≈0.001 ALGO)</li>
            <li>• Instant transaction finality</li>
            <li>• Environmentally friendly proof-of-stake</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default MintNFT;
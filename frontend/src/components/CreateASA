import React, { useState } from 'react';

const CreateASA: React.FC = () => {
  const [formData, setFormData] = useState({
    name: '',
    unit: '',
    decimals: '6',
    totalSupply: '',
  });
  const [isLoading, setIsLoading] = useState(false);
  const [createdAsset, setCreatedAsset] = useState<number | null>(null);

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleCreateToken = async () => {
    setIsLoading(true);
    try {
      // Mock ASA creation
      await new Promise(resolve => setTimeout(resolve, 3000));
      setCreatedAsset(123456789); // Mock asset ID
    } catch (error) {
      console.error('Token creation failed:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-2xl mx-auto bg-white rounded-xl shadow-lg p-6">
      <h2 className="text-2xl font-bold text-gray-900 mb-6">Create Algorand Standard Asset</h2>

      <div className="space-y-6">
        {/* Token Name */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Token Name *
          </label>
          <input
            type="text"
            value={formData.name}
            onChange={(e) => handleInputChange('name', e.target.value)}
            placeholder="e.g., My Loyalty Token"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <p className="text-xs text-gray-500 mt-1">
            The full name of your token (3-32 characters)
          </p>
        </div>

        {/* Unit Name */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Unit Name *
          </label>
          <input
            type="text"
            value={formData.unit}
            onChange={(e) => handleInputChange('unit', e.target.value)}
            placeholder="e.g., MLT"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <p className="text-xs text-gray-500 mt-1">
            Short symbol for your token (up to 8 characters)
          </p>
        </div>

        {/* Decimals */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Decimals *
          </label>
          <select
            value={formData.decimals}
            onChange={(e) => handleInputChange('decimals', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="0">0 (Whole numbers only)</option>
            <option value="1">1 (0.1 precision)</option>
            <option value="2">2 (0.01 precision)</option>
            <option value="3">3 (0.001 precision)</option>
            <option value="6">6 (Micro units - Recommended)</option>
            <option value="9">9 (Nano units)</option>
          </select>
          <p className="text-xs text-gray-500 mt-1">
            Number of decimal places. 6 is standard for most tokens.
          </p>
        </div>

        {/* Total Supply */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Total Supply *
          </label>
          <input
            type="text"
            value={formData.totalSupply}
            onChange={(e) => handleInputChange('totalSupply', e.target.value)}
            placeholder="e.g., 1000000"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <p className="text-xs text-gray-500 mt-1">
            Total number of tokens to create (in base units)
          </p>
        </div>

        {/* Create Button */}
        <button
          onClick={handleCreateToken}
          disabled={isLoading || !formData.name || !formData.unit || !formData.totalSupply}
          className={`w-full py-3 px-4 rounded-lg font-semibold text-white transition duration-200 ${
            isLoading || !formData.name || !formData.unit || !formData.totalSupply
              ? 'bg-gray-400 cursor-not-allowed'
              : 'bg-blue-600 hover:bg-blue-700 transform hover:scale-105'
          }`}
        >
          {isLoading ? (
            <div className="flex items-center justify-center">
              <div className="w-5 h-5 border-t-2 border-b-2 border-white rounded-full animate-spin mr-2"></div>
              Creating Token...
            </div>
          ) : (
            'Create Token'
          )}
        </button>

        {/* Success Message */}
        {createdAsset && (
          <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
            <div className="flex items-center">
              <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3">
                <span className="text-green-600 text-lg">✓</span>
              </div>
              <div>
                <p className="text-green-800 font-semibold">Token Created Successfully!</p>
                <p className="text-green-600 text-sm">
                  Asset ID: <span className="font-mono">{createdAsset}</span>
                </p>
                <p className="text-green-600 text-sm mt-1">
                  Your token is now live on the Algorand blockchain.
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Info Box */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h4 className="text-sm font-semibold text-blue-900 mb-2">About Algorand Standard Assets</h4>
          <ul className="text-xs text-blue-700 space-y-1">
            <li>• Low transaction fees (≈0.001 ALGO per transaction)</li>
            <li>• Fast finality (under 5 seconds)</li>
            <li>• Built-in compliance features</li>
            <li>• Support for fractional ownership</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default CreateASA;